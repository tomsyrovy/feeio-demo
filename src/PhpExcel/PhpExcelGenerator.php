<?php
	/**
	 * Project: feeio2
	 * File: PhpExcelGenerator.php
	 * Author: Tomas SYROVY <tomas@syrovy.pro>
	 * Date: 02.08.16
	 * Version: 1.0
	 */

	namespace PhpExcel;


	use Doctrine\ORM\EntityManager;
	use PhpExcel\Library\PhpExcelStyles;

	abstract class PhpExcelGenerator {

		/**
		 * @var EntityManager
		 */
		protected $em;

		/**
		 * @var \PHPExcel
		 */
		private $phpExcelObject;

		/**
		 * @var \PHPExcel_Worksheet
		 */
		private $activeSheet;

		/**
		 * @var mixed
		 */
		protected $data;

		/**
		 * @var string
		 */
		private $type;

		/**
		 * @var integer
		 */
		protected $c;

		/**
		 * @var integer
		 */
		protected $r;

		/**
		 * @var string
		 */
		private $title;

		/**
		 * PhpExcelGenerator constructor.
		 *
		 * @param EntityManager $em
		 * @param string $title
		 */
		public function __construct($em, $title){
			$this->em = $em;
			$this->title = $title;
			$this->phpExcelObject = new \PHPExcel();
		}

		/**
		 * @param string $author
		 * @param string $companyName
		 */
		public function setMetaProperties($author, $companyName){
			$this->phpExcelObject
						->getProperties()
						->setCreator($author)
						->setLastModifiedBy($author)
						->setTitle($this->title)
						->setSubject($this->title)
						->setDescription("Document ".$this->title." generated by Feeio (www.feeio.com). ")
						->setKeywords($this->title." feeio")
						->setCompany($companyName);
		}

		protected function setCellValue($c, $r, $value, $style = null, $indent = 0){

			$this->activeSheet->setCellValueByColumnAndRow($c, $r, $value);

			if($style === null){
				$this->activeSheet->getStyleByColumnAndRow($c, $r)->applyFromArray(PhpExcelStyles::$STYLES['normal'])->getAlignment()->setIndent($indent);
			}else{
				if(array_key_exists($style, PhpExcelStyles::$STYLES)){
					$this->activeSheet->getStyleByColumnAndRow($c, $r)->applyFromArray(PhpExcelStyles::$STYLES[$style])->getAlignment()->setIndent($indent);
				}else{
					$this->activeSheet->getStyleByColumnAndRow($c, $r)->applyFromArray(PhpExcelStyles::$STYLES['normal'])->getAlignment()->setIndent($indent);
				}
			}

		}

		protected function finalize(){

			// Auto size columns for each worksheet
			foreach ($this->getPhpExcelObject()->getWorksheetIterator() as $worksheet) {

				$this->getPhpExcelObject()->setActiveSheetIndex($this->getPhpExcelObject()->getIndex($worksheet));

				$sheet = $this->getPhpExcelObject()->getActiveSheet();
				$cellIterator = $sheet->getRowIterator()->current()->getCellIterator();
				$cellIterator->setIterateOnlyExistingCells(false); //TRUE/FALSE má vliv na výkon, FALSE = zhoršení výkonu
				/** @var \PHPExcel_Cell $cell */
				foreach ($cellIterator as $cell) {
					$sheet->getColumnDimension($cell->getColumn())->setAutoSize(true);
				}
			}

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$this->getPhpExcelObject()->setActiveSheetIndex(0);

			$filename = $this->title.'.xls';
			header('Content-Description: File Transfer');
			header('Content-Type: application/vnd.ms-excel');
			header('Content-Disposition: attachment; filename="'.$filename.'"');
			header('Content-Transfer-Encoding: binary');
			header('Connection: Keep-Alive');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');

			$objWriter = new \PHPExcel_Writer_Excel5($this->getPhpExcelObject());
			$objWriter->save('php://output');
			exit;

		}

		/**
		 * @return \PHPExcel
		 */
		public function getPhpExcelObject(){
			return $this->phpExcelObject;
		}

		/**
		 * @param mixed $data
		 */
		public function setData( $data ){
			$this->data = $data;
		}

		/**
		 * @return string
		 */
		protected function getType(){
			return $this->type;
		}

		/**
		 * @param string $type
		 */
		protected function setType( $type ){
			$this->type = $type;
		}

		/**
		 * @return \PHPExcel_Worksheet
		 */
		protected function getActiveSheet(){
			return $this->activeSheet;
		}

		/**
		 * @param \PHPExcel_Worksheet $activeSheet
		 */
		protected function setActiveSheet( $activeSheet ){
			$this->activeSheet = $activeSheet;
			$this->r = 1;
			$this->c = 0;
		}





	}