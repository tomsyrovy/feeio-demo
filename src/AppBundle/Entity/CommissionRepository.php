<?php

namespace AppBundle\Entity;

use AppBundle\DependencyInjection\TimeWindowManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use AppBundle\Entity\UserCompanyTemporalityStatus;
use AppBundle\Entity\Commission;
use UserBundle\Entity\User;

/**
 * CommissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommissionRepository extends EntityRepository
{

	/**
	 * Vrátí kolekci zakázek daného uživatele všech společností, kde tento uživatel je aktuálně v zadaném stavu
	 *
	 * @param User                         $user
	 * @param UserCompanyTemporalityStatus $ucts
	 *
	 * @return array
	 */
	public function getCommissionOfUserInAllCompaniesOfUserCompanyRelationType(User $user, UserCompanyTemporalityStatus $ucts){

		$em = $this->getEntityManager();

		$twm = new TimeWindowManager($em, $user);
		$yearmonths = $twm->getDefaultYearMonths(0, 1);

		$qb = new QueryBuilder($em);
		$qb
			->select('c')
			->from('AppBundle:Commission', 'c')
			->join('c.campaign', 'cam')
			->join('cam.client', 'cl')
			->join('cl.company', 'co')
			->join('co.userCompanyRelations', 'ucr')
			->join('ucr.temporalities', 'uct')
			->join('c.allocationContainers', 'ac')
			->join('ac.allocationContainerLists', 'acl')
			->join('acl.allocationContainerListItems', 'acli')
			->join('acli.concreteSource', 'uc')
			->where('uct.until IS NULL')
			->andWhere('ucr.user = :user')
			->andWhere('uct.status = :ucts')
			->andWhere('uc.user = :user')
			->andWhere('c.enabled = :enabled')
			->andWhere('c.closed = :closed')
			->andWhere('ac.enabled = :enabled')
//			->andWhere('ac.yearmonth IN (:yearmonths)')
			->orderBy('c.name', 'ASC');
		//TODO - omezit ac na konkrétní YM

		$qb
			->setParameter('user', $user)
			->setParameter('enabled', true)
			->setParameter('closed', false)
//			->setParameter('yearmonths', $yearmonths)
			->setParameter('ucts', $ucts);

		$query = $qb->getQuery();

		$commissions = $query->getResult();

//		dump($commissions);exit;

		return $commissions;

	}


	/**
	 * Vrátí seznam všech zakázek spadající do všech společností zadaného uživatele v časovém okně zadaného uživatele
	 *
	 * @param \UserBundle\Entity\User $user
	 *
	 * @return array
	 */
	public function getCommissionOfUserInAllCompaniesInTimeWindow(User $user){

		$em = $this->getEntityManager();

		$twm = new TimeWindowManager($em, $user);
		$tw = $twm->getTimeWindow();

		$t1 = $tw->getYearmonthFrom()->getId();
		$t2 = $tw->getYearmonthTo()->getId();

//		if($t2 === $t1){
//			$t1 = $t2-1; //T-éčka se nikdy nesmí rovnat (!!!)
//		}

		$qb = new QueryBuilder($em);
		$qb
		->select('c')
		->addSelect('cam')
		->addSelect('cl')
		->addSelect('co')
		->addSelect('cg')
		->from('AppBundle:Commission', 'c')
		->join('c.campaign', 'cam')
		->join('cam.client', 'cl')
		->join('cl.company', 'co')
		->join('co.userCompanyRelations', 'ucr')
		->join('ucr.temporalities', 'uct')
		->join('uct.status', 'ucts')
		->join('c.startDate', 'c1')
		->join('c.endDate', 'c2')
		->join('cam.companyGroup', 'cg')
		->where('uct.until IS NULL')
		->andWhere('ucr.user = :user')
		->andWhere('ucts.code = :uctsCode')
		->andWhere('(c1.id >= :t1 AND c1.id <= :t2) OR (c2.id >= :t1 AND c2.id <= :t2)')
		->orderBy('c.name', 'ASC');

		$qb
			->setParameter('user', $user)
			->setParameter('t1', $t1)
			->setParameter('t2', $t2)
			->setParameter('uctsCode', 'enabled');

		$query = $qb->getQuery();

		$commissions = $query->getResult();

//		/** @var Commission $commission */
//		foreach($commissions as $commission){
//
//			$sql = '
//				SELECT
//					AllocationContainer.commission_id AS c,
//					SUM(IFNULL(AllocationContainerListItem.quantityPlan, 1)*IFNULL(AllocationContainerListItem.buyingPricePlan, 0)) AS buyingPricePlan,
//					SUM(IFNULL(AllocationContainerListItem.quantityPlan, 1)*IFNULL(AllocationContainerListItem.sellingPricePlan, 0)) AS sellingPricePlan,
//					SUM((IFNULL(AllocationContainerListItem.sellingPricePlan, 0)-IFNULL(AllocationContainerListItem.buyingPricePlan, 0))*IFNULL(AllocationContainerListItem.quantityPlan, 1)) AS profitPlan,
//					SUM(IFNULL(AllocationContainerListItem.quantityReal, 1)*IFNULL(AllocationContainerListItem.buyingPriceReal, 0)) AS buyingPriceReal,
//					SUM(IFNULL(AllocationContainerListItem.quantityReal, 1)*IFNULL(AllocationContainerListItem.sellingPriceReal, 0)) AS sellingPriceReal,
//					SUM((IFNULL(AllocationContainerListItem.sellingPriceReal, 0)-IFNULL(AllocationContainerListItem.buyingPriceReal, 0))*IFNULL(AllocationContainerListItem.quantityReal, 1)) AS profitReal
//				FROM AllocationContainer
//					JOIN AllocationContainerList ON AllocationContainer.id = AllocationContainerList.allocationContainer_id
//					JOIN AllocationContainerListItem ON AllocationContainerList.id = AllocationContainerListItem.allocationContainerList_id
//				WHERE AllocationContainer.enabled = 1
//					AND AllocationContainer.client_approved = 1
//					AND AllocationContainer.yearmonth_id IS NULL
//					AND AllocationContainer.commission_id = :id
//				GROUP BY c
//			';
//
//			$params = [
//				'id' => $commission->getId(),
//			];
//
//			$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
//			$stmt->setFetchMode(\PDO::FETCH_CLASS, '\AppBundle\DataObject\SumarizationDataObject');
//			$stmt->execute($params);
//			$result = $stmt->fetch();
//
//			$commission->setSums($result);
//
//		}

		return $commissions;

	}

	/**
	 * Vrátí seznam všech zakázek spadající do všech společností zadaného uživatele
	 *
	 * @param \UserBundle\Entity\User $user
	 *
	 * @return array
	 */
	public function getCommissionOfUser(User $user){

		$em = $this->getEntityManager();

		$qb = new QueryBuilder($em);
		$qb
			->select('c')
			->addSelect('cam')
			->addSelect('cl')
			->addSelect('co')
			->addSelect('cg')
			->from('AppBundle:Commission', 'c')
			->join('c.campaign', 'cam')
			->join('cam.client', 'cl')
			->join('cl.company', 'co')
			->join('co.userCompanyRelations', 'ucr')
			->join('ucr.temporalities', 'uct')
			->join('uct.status', 'ucts')
			->join('c.startDate', 'c1')
			->join('c.endDate', 'c2')
			->join('cam.companyGroup', 'cg')
			->where('uct.until IS NULL')
			->andWhere('ucr.user = :user')
			->andWhere('ucts.code = :uctsCode')
			->orderBy('c.name', 'ASC');

		$qb
			->setParameter('user', $user)
			->setParameter('uctsCode', 'enabled');

		$query = $qb->getQuery();

		$commissions = $query->getResult();

//		/** @var Commission $commission */
//		foreach($commissions as $commission){
//
//			$sql = '
//				SELECT
//					AllocationContainer.commission_id AS c,
//					SUM(IFNULL(AllocationContainerListItem.quantityPlan, 1)*IFNULL(AllocationContainerListItem.buyingPricePlan, 0)) AS buyingPricePlan,
//					SUM(IFNULL(AllocationContainerListItem.quantityPlan, 1)*IFNULL(AllocationContainerListItem.sellingPricePlan, 0)) AS sellingPricePlan,
//					SUM((IFNULL(AllocationContainerListItem.sellingPricePlan, 0)-IFNULL(AllocationContainerListItem.buyingPricePlan, 0))*IFNULL(AllocationContainerListItem.quantityPlan, 1)) AS profitPlan,
//					SUM(IFNULL(AllocationContainerListItem.quantityReal, 1)*IFNULL(AllocationContainerListItem.buyingPriceReal, 0)) AS buyingPriceReal,
//					SUM(IFNULL(AllocationContainerListItem.quantityReal, 1)*IFNULL(AllocationContainerListItem.sellingPriceReal, 0)) AS sellingPriceReal,
//					SUM((IFNULL(AllocationContainerListItem.sellingPriceReal, 0)-IFNULL(AllocationContainerListItem.buyingPriceReal, 0))*IFNULL(AllocationContainerListItem.quantityReal, 1)) AS profitReal
//				FROM AllocationContainer
//					JOIN AllocationContainerList ON AllocationContainer.id = AllocationContainerList.allocationContainer_id
//					JOIN AllocationContainerListItem ON AllocationContainerList.id = AllocationContainerListItem.allocationContainerList_id
//				WHERE AllocationContainer.enabled = 1
//					AND AllocationContainer.client_approved = 1
//					AND AllocationContainer.yearmonth_id IS NULL
//					AND AllocationContainer.commission_id = :id
//				GROUP BY c
//			';
//
//			$params = [
//				'id' => $commission->getId(),
//			];
//
//			$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
//			$stmt->setFetchMode(\PDO::FETCH_CLASS, '\AppBundle\DataObject\SumarizationDataObject');
//			$stmt->execute($params);
//			$result = $stmt->fetch();
//
//			$commission->setSums($result);
//
//		}

		return $commissions;

	}

	public function findByCompanyIds($companyIds){

		$companyIds = implode(', ', $companyIds);

		$qb = new QueryBuilder($this->getEntityManager());
		$qb
			->select('c')
			->from('AppBundle:Commission', 'c')
			->join('c.campaign', 'cam')
			->join('cam.client', 'cl')
			->join('cl.company', 'co')
			->where('co.id IN ('.$companyIds.')');

		$query = $qb->getQuery();

		return $query->getResult();

	}

}
